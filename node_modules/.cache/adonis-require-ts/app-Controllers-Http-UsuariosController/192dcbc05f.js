"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const Usuario_1 = __importDefault(global[Symbol.for('ioc.use')]("App/Models/Usuario"));
const RegisterValidator_1 = __importDefault(global[Symbol.for('ioc.use')]("App/Validators/RegisterValidator"));
class UsuariosController {
    async register({ request, response }) {
        const data = await request.validate(RegisterValidator_1.default);
        const crear = await Usuario_1.default.create(data);
        return response.json({ crear });
    }
    async login({ request, auth, response }) {
        const email = request.input('email');
        const pass = request.input('password');
        try {
            const token = await auth.use('api').attempt(email, pass);
            return token;
        }
        catch {
            return response.badRequest('La contrase√±a o el correo son incorrectos');
        }
    }
    async Token({ auth, response }) {
        try {
            return await auth.use('api').authenticate();
        }
        catch (e) {
            return response.unauthorized({ error: "Token no es validado" });
        }
    }
    async logout({ auth }) {
        await auth.use('api').revoke();
        return {
            revoked: true
        };
    }
}
exports.default = UsuariosController;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiVXN1YXJpb3NDb250cm9sbGVyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiVXN1YXJpb3NDb250cm9sbGVyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O0FBRUEsdUZBQXdDO0FBQ3hDLCtHQUFnRTtBQUVoRSxNQUFxQixrQkFBa0I7SUFFOUIsS0FBSyxDQUFDLFFBQVEsQ0FBQyxFQUFDLE9BQU8sRUFBQyxRQUFRLEVBQUM7UUFFdEMsTUFBTSxJQUFJLEdBQUcsTUFBTSxPQUFPLENBQUMsUUFBUSxDQUFDLDJCQUFpQixDQUFDLENBQUE7UUFFdEQsTUFBTSxLQUFLLEdBQUcsTUFBTSxpQkFBTyxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsQ0FBQTtRQUV4QyxPQUFPLFFBQVEsQ0FBQyxJQUFJLENBQUMsRUFBQyxLQUFLLEVBQUMsQ0FBQyxDQUFBO0lBQy9CLENBQUM7SUFFTSxLQUFLLENBQUMsS0FBSyxDQUFDLEVBQUMsT0FBTyxFQUFDLElBQUksRUFBQyxRQUFRLEVBQUM7UUFDeEMsTUFBTSxLQUFLLEdBQUcsT0FBTyxDQUFDLEtBQUssQ0FBQyxPQUFPLENBQUMsQ0FBQTtRQUNwQyxNQUFNLElBQUksR0FBRyxPQUFPLENBQUMsS0FBSyxDQUFDLFVBQVUsQ0FBQyxDQUFBO1FBRXRDLElBQUk7WUFDRixNQUFNLEtBQUssR0FBRyxNQUFNLElBQUksQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLENBQUMsT0FBTyxDQUFDLEtBQUssRUFBRSxJQUFJLENBQUMsQ0FBQTtZQUN4RCxPQUFPLEtBQUssQ0FBQTtTQUNiO1FBQUMsTUFBTTtZQUNOLE9BQU8sUUFBUSxDQUFDLFVBQVUsQ0FBQywyQ0FBMkMsQ0FBQyxDQUFBO1NBQ3hFO0lBQ0gsQ0FBQztJQUVNLEtBQUssQ0FBQyxLQUFLLENBQUMsRUFBQyxJQUFJLEVBQUMsUUFBUSxFQUFDO1FBQ2hDLElBQUc7WUFDRCxPQUFPLE1BQU0sSUFBSSxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsQ0FBQyxZQUFZLEVBQUUsQ0FBQTtTQUM1QztRQUNELE9BQU0sQ0FBQyxFQUFDO1lBQ04sT0FBTyxRQUFRLENBQUMsWUFBWSxDQUFDLEVBQUMsS0FBSyxFQUFDLHNCQUFzQixFQUFDLENBQUMsQ0FBQTtTQUM3RDtJQUNILENBQUM7SUFFTSxLQUFLLENBQUMsTUFBTSxDQUFDLEVBQUUsSUFBSSxFQUFFO1FBQzFCLE1BQU0sSUFBSSxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsQ0FBQyxNQUFNLEVBQUUsQ0FBQTtRQUM5QixPQUFPO1lBQ0gsT0FBTyxFQUFFLElBQUk7U0FDaEIsQ0FBQTtJQUNMLENBQUM7Q0FDQTtBQXRDRCxxQ0FzQ0MiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBpbXBvcnQgdHlwZSB7IEh0dHBDb250ZXh0Q29udHJhY3QgfSBmcm9tICdAaW9jOkFkb25pcy9Db3JlL0h0dHBDb250ZXh0J1xyXG5cclxuaW1wb3J0IFVzdWFyaW8gZnJvbSBcIkFwcC9Nb2RlbHMvVXN1YXJpb1wiXHJcbmltcG9ydCBSZWdpc3RlclZhbGlkYXRvciBmcm9tIFwiQXBwL1ZhbGlkYXRvcnMvUmVnaXN0ZXJWYWxpZGF0b3JcIlxyXG5cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgVXN1YXJpb3NDb250cm9sbGVyIHtcclxuICBcclxuICBwdWJsaWMgYXN5bmMgcmVnaXN0ZXIoe3JlcXVlc3QscmVzcG9uc2V9KXtcclxuXHJcbiAgICBjb25zdCBkYXRhID0gYXdhaXQgcmVxdWVzdC52YWxpZGF0ZShSZWdpc3RlclZhbGlkYXRvcilcclxuXHJcbiAgICBjb25zdCBjcmVhciA9IGF3YWl0IFVzdWFyaW8uY3JlYXRlKGRhdGEpXHJcblxyXG4gICAgcmV0dXJuIHJlc3BvbnNlLmpzb24oe2NyZWFyfSlcclxuICB9XHJcblxyXG4gIHB1YmxpYyBhc3luYyBsb2dpbih7cmVxdWVzdCxhdXRoLHJlc3BvbnNlfSl7XHJcbiAgICBjb25zdCBlbWFpbCA9IHJlcXVlc3QuaW5wdXQoJ2VtYWlsJylcclxuICAgIGNvbnN0IHBhc3MgPSByZXF1ZXN0LmlucHV0KCdwYXNzd29yZCcpXHJcblxyXG4gICAgdHJ5IHtcclxuICAgICAgY29uc3QgdG9rZW4gPSBhd2FpdCBhdXRoLnVzZSgnYXBpJykuYXR0ZW1wdChlbWFpbCwgcGFzcylcclxuICAgICAgcmV0dXJuIHRva2VuXHJcbiAgICB9IGNhdGNoIHtcclxuICAgICAgcmV0dXJuIHJlc3BvbnNlLmJhZFJlcXVlc3QoJ0xhIGNvbnRyYXNlw7FhIG8gZWwgY29ycmVvIHNvbiBpbmNvcnJlY3RvcycpXHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBwdWJsaWMgYXN5bmMgVG9rZW4oe2F1dGgscmVzcG9uc2V9KXtcclxuICAgIHRyeXtcclxuICAgICAgcmV0dXJuIGF3YWl0IGF1dGgudXNlKCdhcGknKS5hdXRoZW50aWNhdGUoKVxyXG4gICAgfVxyXG4gICAgY2F0Y2goZSl7XHJcbiAgICAgIHJldHVybiByZXNwb25zZS51bmF1dGhvcml6ZWQoe2Vycm9yOlwiVG9rZW4gbm8gZXMgdmFsaWRhZG9cIn0pXHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBwdWJsaWMgYXN5bmMgbG9nb3V0KHsgYXV0aCB9KXtcclxuICAgIGF3YWl0IGF1dGgudXNlKCdhcGknKS5yZXZva2UoKVxyXG4gICAgcmV0dXJuIHtcclxuICAgICAgICByZXZva2VkOiB0cnVlXHJcbiAgICB9XHJcbn1cclxufVxyXG4iXX0=