"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const TempHum_1 = __importDefault(global[Symbol.for('ioc.use')]("App/Models/TempHum"));
const mongoose_1 = __importDefault(require("mongoose"));
class DatosTemyHumsController {
    async DatosTemyHumGrafica() {
        await mongoose_1.default.connect('mongodb+srv://admin:12345@sandbox.qlfli.mongodb.net/Sensores?retryWrites=true&w=majority');
        const buscar = await TempHum_1.default.TempHumModelo.find({}, { "temperatura": 1, "humedad": 1, "_id": 0 }).sort({ $natural: -1 });
        return buscar;
    }
    async DatosTemyHum() {
        await mongoose_1.default.connect('mongodb+srv://admin:12345@sandbox.qlfli.mongodb.net/Sensores?retryWrites=true&w=majority');
        const buscar = await TempHum_1.default.TempHumModelo.find({}, { "temperatura": 1, "humedad": 1, "fecha": 1, "_id": 0 }).sort({ $natural: 1 });
        return buscar;
    }
    async insertarTempHum({ request, response }) {
        await mongoose_1.default.connect('mongodb+srv://admin:12345@sandbox.qlfli.mongodb.net/Sensores?retryWrites=true&w=majority');
        const temperatura = request.input('temperatura');
        const humedad = request.input('humedad');
        const fecha = new Date();
        const crear = new TempHum_1.default.TempHumModelo({
            temperatura: temperatura,
            humedad: humedad,
            fecha: fecha
        });
        await crear.save();
        return response.json(crear);
    }
}
exports.default = DatosTemyHumsController;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiRGF0b3NUZW15SHVtc0NvbnRyb2xsZXIuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJEYXRvc1RlbXlIdW1zQ29udHJvbGxlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7OztBQUNBLHVGQUErQztBQUMvQyx3REFBK0I7QUFFL0IsTUFBcUIsdUJBQXVCO0lBRS9CLEtBQUssQ0FBQyxtQkFBbUI7UUFDMUIsTUFBTSxrQkFBUSxDQUFDLE9BQU8sQ0FBQywwRkFBMEYsQ0FBQyxDQUFBO1FBQ2xILE1BQU0sTUFBTSxHQUFDLE1BQU0saUJBQWEsQ0FBQyxhQUFhLENBQUMsSUFBSSxDQUFDLEVBQUUsRUFBQyxFQUFDLGFBQWEsRUFBQyxDQUFDLEVBQUMsU0FBUyxFQUFDLENBQUMsRUFBQyxLQUFLLEVBQUMsQ0FBQyxFQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsRUFBQyxRQUFRLEVBQUMsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxDQUFDO1FBQ2xILE9BQU8sTUFBTSxDQUFBO0lBQ25CLENBQUM7SUFFTSxLQUFLLENBQUMsWUFBWTtRQUNuQixNQUFNLGtCQUFRLENBQUMsT0FBTyxDQUFDLDBGQUEwRixDQUFDLENBQUE7UUFDbEgsTUFBTSxNQUFNLEdBQUMsTUFBTSxpQkFBYSxDQUFDLGFBQWEsQ0FBQyxJQUFJLENBQUMsRUFBRSxFQUFDLEVBQUMsYUFBYSxFQUFDLENBQUMsRUFBQyxTQUFTLEVBQUMsQ0FBQyxFQUFDLE9BQU8sRUFBQyxDQUFDLEVBQUMsS0FBSyxFQUFDLENBQUMsRUFBQyxDQUFDLENBQUMsSUFBSSxDQUFDLEVBQUMsUUFBUSxFQUFDLENBQUMsRUFBQyxDQUFDLENBQUM7UUFDM0gsT0FBTyxNQUFNLENBQUE7SUFDbkIsQ0FBQztJQUVNLEtBQUssQ0FBQyxlQUFlLENBQUMsRUFBQyxPQUFPLEVBQUMsUUFBUSxFQUFDO1FBQ3pDLE1BQU0sa0JBQVEsQ0FBQyxPQUFPLENBQUMsMEZBQTBGLENBQUMsQ0FBQTtRQUVqSCxNQUFNLFdBQVcsR0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLGFBQWEsQ0FBQyxDQUFBO1FBQzlDLE1BQU0sT0FBTyxHQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsU0FBUyxDQUFDLENBQUE7UUFDdEMsTUFBTSxLQUFLLEdBQUMsSUFBSSxJQUFJLEVBQUUsQ0FBQTtRQUV0QixNQUFNLEtBQUssR0FBRyxJQUFJLGlCQUFhLENBQUMsYUFBYSxDQUFFO1lBQzdDLFdBQVcsRUFBRSxXQUFXO1lBQ3hCLE9BQU8sRUFBQyxPQUFPO1lBQ2YsS0FBSyxFQUFDLEtBQUs7U0FDWCxDQUFDLENBQUE7UUFFSCxNQUFNLEtBQUssQ0FBQyxJQUFJLEVBQUUsQ0FBQTtRQUNsQixPQUFPLFFBQVEsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUE7SUFDbEMsQ0FBQztDQUNOO0FBOUJELDBDQThCQyIsInNvdXJjZXNDb250ZW50IjpbIi8vaW1wb3J0IHR5cGUgeyBIdHRwQ29udGV4dENvbnRyYWN0IH0gZnJvbSAnQGlvYzpBZG9uaXMvQ29yZS9IdHRwQ29udGV4dCdcclxuaW1wb3J0IFRlbXBIdW1Nb2RlbG8gZnJvbSAnQXBwL01vZGVscy9UZW1wSHVtJztcclxuaW1wb3J0IG1vbmdvb3NlIGZyb20gJ21vbmdvb3NlJ1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgRGF0b3NUZW15SHVtc0NvbnRyb2xsZXIge1xyXG5cclxuICAgICAgcHVibGljIGFzeW5jIERhdG9zVGVteUh1bUdyYWZpY2EoKXtcclxuICAgICAgICAgICAgYXdhaXQgbW9uZ29vc2UuY29ubmVjdCgnbW9uZ29kYitzcnY6Ly9hZG1pbjoxMjM0NUBzYW5kYm94LnFsZmxpLm1vbmdvZGIubmV0L1NlbnNvcmVzP3JldHJ5V3JpdGVzPXRydWUmdz1tYWpvcml0eScpXHJcbiAgICAgICAgICAgIGNvbnN0IGJ1c2Nhcj1hd2FpdCBUZW1wSHVtTW9kZWxvLlRlbXBIdW1Nb2RlbG8uZmluZCh7fSx7XCJ0ZW1wZXJhdHVyYVwiOjEsXCJodW1lZGFkXCI6MSxcIl9pZFwiOjB9KS5zb3J0KHskbmF0dXJhbDotMX0pO1xyXG4gICAgICAgICAgICByZXR1cm4gYnVzY2FyXHJcbiAgICAgIH1cclxuXHJcbiAgICAgIHB1YmxpYyBhc3luYyBEYXRvc1RlbXlIdW0oKXtcclxuICAgICAgICAgICAgYXdhaXQgbW9uZ29vc2UuY29ubmVjdCgnbW9uZ29kYitzcnY6Ly9hZG1pbjoxMjM0NUBzYW5kYm94LnFsZmxpLm1vbmdvZGIubmV0L1NlbnNvcmVzP3JldHJ5V3JpdGVzPXRydWUmdz1tYWpvcml0eScpXHJcbiAgICAgICAgICAgIGNvbnN0IGJ1c2Nhcj1hd2FpdCBUZW1wSHVtTW9kZWxvLlRlbXBIdW1Nb2RlbG8uZmluZCh7fSx7XCJ0ZW1wZXJhdHVyYVwiOjEsXCJodW1lZGFkXCI6MSxcImZlY2hhXCI6MSxcIl9pZFwiOjB9KS5zb3J0KHskbmF0dXJhbDoxfSk7XHJcbiAgICAgICAgICAgIHJldHVybiBidXNjYXJcclxuICAgICAgfVxyXG5cclxuICAgICAgcHVibGljIGFzeW5jIGluc2VydGFyVGVtcEh1bSh7cmVxdWVzdCxyZXNwb25zZX0pe1xyXG4gICAgICAgICAgICBhd2FpdCBtb25nb29zZS5jb25uZWN0KCdtb25nb2RiK3NydjovL2FkbWluOjEyMzQ1QHNhbmRib3gucWxmbGkubW9uZ29kYi5uZXQvU2Vuc29yZXM/cmV0cnlXcml0ZXM9dHJ1ZSZ3PW1ham9yaXR5JylcclxuICAgIFxyXG4gICAgICAgICAgICAgY29uc3QgdGVtcGVyYXR1cmE9cmVxdWVzdC5pbnB1dCgndGVtcGVyYXR1cmEnKVxyXG4gICAgICAgICAgICAgY29uc3QgaHVtZWRhZD1yZXF1ZXN0LmlucHV0KCdodW1lZGFkJylcclxuICAgICAgICAgICAgIGNvbnN0IGZlY2hhPW5ldyBEYXRlKClcclxuICAgICAgICBcclxuICAgICAgICAgICAgIGNvbnN0IGNyZWFyID0gbmV3IFRlbXBIdW1Nb2RlbG8uVGVtcEh1bU1vZGVsbyAoe1xyXG4gICAgICAgICAgICAgICB0ZW1wZXJhdHVyYTogdGVtcGVyYXR1cmEsXHJcbiAgICAgICAgICAgICAgIGh1bWVkYWQ6aHVtZWRhZCxcclxuICAgICAgICAgICAgICAgZmVjaGE6ZmVjaGFcclxuICAgICAgICAgICAgICB9KVxyXG4gICAgICAgIFxyXG4gICAgICAgICAgICAgYXdhaXQgY3JlYXIuc2F2ZSgpXHJcbiAgICAgICAgICAgICByZXR1cm4gcmVzcG9uc2UuanNvbihjcmVhcilcclxuICAgICAgfVxyXG59XHJcbiJdfQ==