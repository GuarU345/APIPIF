"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const standalone_1 = require("@adonisjs/auth/build/standalone");
class AuthMiddleware {
    constructor() {
        this.redirectTo = '/login';
    }
    async authenticate(auth, guards) {
        let guardLastAttempted;
        for (let guard of guards) {
            guardLastAttempted = guard;
            if (await auth.use(guard).check()) {
                auth.defaultGuard = guard;
                return true;
            }
        }
        throw new standalone_1.AuthenticationException('Unauthorized access', 'E_UNAUTHORIZED_ACCESS', guardLastAttempted, this.redirectTo);
    }
    async handle({ auth }, next, customGuards) {
        const guards = customGuards.length ? customGuards : [auth.name];
        await this.authenticate(auth, guards);
        await next();
    }
}
exports.default = AuthMiddleware;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQXV0aC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIkF1dGgudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFFQSxnRUFBeUU7QUFTekUsTUFBcUIsY0FBYztJQUFuQztRQUlZLGVBQVUsR0FBRyxRQUFRLENBQUE7SUE0RGpDLENBQUM7SUFsRFcsS0FBSyxDQUFDLFlBQVksQ0FBQyxJQUFpQyxFQUFFLE1BQTRCO1FBTzFGLElBQUksa0JBQXNDLENBQUE7UUFFMUMsS0FBSyxJQUFJLEtBQUssSUFBSSxNQUFNLEVBQUU7WUFDeEIsa0JBQWtCLEdBQUcsS0FBSyxDQUFBO1lBRTFCLElBQUksTUFBTSxJQUFJLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxDQUFDLEtBQUssRUFBRSxFQUFFO2dCQU1qQyxJQUFJLENBQUMsWUFBWSxHQUFHLEtBQUssQ0FBQTtnQkFDekIsT0FBTyxJQUFJLENBQUE7YUFDWjtTQUNGO1FBS0QsTUFBTSxJQUFJLG9DQUF1QixDQUMvQixxQkFBcUIsRUFDckIsdUJBQXVCLEVBQ3ZCLGtCQUFrQixFQUNsQixJQUFJLENBQUMsVUFBVSxDQUNoQixDQUFBO0lBQ0gsQ0FBQztJQUtNLEtBQUssQ0FBQyxNQUFNLENBQ2pCLEVBQUUsSUFBSSxFQUF1QixFQUM3QixJQUF5QixFQUN6QixZQUFrQztRQU1sQyxNQUFNLE1BQU0sR0FBRyxZQUFZLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxZQUFZLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFBO1FBQy9ELE1BQU0sSUFBSSxDQUFDLFlBQVksQ0FBQyxJQUFJLEVBQUUsTUFBTSxDQUFDLENBQUE7UUFDckMsTUFBTSxJQUFJLEVBQUUsQ0FBQTtJQUNkLENBQUM7Q0FDRjtBQWhFRCxpQ0FnRUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBHdWFyZHNMaXN0IH0gZnJvbSAnQGlvYzpBZG9uaXMvQWRkb25zL0F1dGgnXHJcbmltcG9ydCB7IEh0dHBDb250ZXh0Q29udHJhY3QgfSBmcm9tICdAaW9jOkFkb25pcy9Db3JlL0h0dHBDb250ZXh0J1xyXG5pbXBvcnQgeyBBdXRoZW50aWNhdGlvbkV4Y2VwdGlvbiB9IGZyb20gJ0BhZG9uaXNqcy9hdXRoL2J1aWxkL3N0YW5kYWxvbmUnXHJcblxyXG4vKipcclxuICogQXV0aCBtaWRkbGV3YXJlIGlzIG1lYW50IHRvIHJlc3RyaWN0IHVuLWF1dGhlbnRpY2F0ZWQgYWNjZXNzIHRvIGEgZ2l2ZW4gcm91dGVcclxuICogb3IgYSBncm91cCBvZiByb3V0ZXMuXHJcbiAqXHJcbiAqIFlvdSBtdXN0IHJlZ2lzdGVyIHRoaXMgbWlkZGxld2FyZSBpbnNpZGUgYHN0YXJ0L2tlcm5lbC50c2AgZmlsZSB1bmRlciB0aGUgbGlzdFxyXG4gKiBvZiBuYW1lZCBtaWRkbGV3YXJlLlxyXG4gKi9cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgQXV0aE1pZGRsZXdhcmUge1xyXG4gIC8qKlxyXG4gICAqIFRoZSBVUkwgdG8gcmVkaXJlY3QgdG8gd2hlbiByZXF1ZXN0IGlzIFVuYXV0aG9yaXplZFxyXG4gICAqL1xyXG4gIHByb3RlY3RlZCByZWRpcmVjdFRvID0gJy9sb2dpbidcclxuXHJcbiAgLyoqXHJcbiAgICogQXV0aGVudGljYXRlcyB0aGUgY3VycmVudCBIVFRQIHJlcXVlc3QgYWdhaW5zdCBhIGN1c3RvbSBzZXQgb2YgZGVmaW5lZFxyXG4gICAqIGd1YXJkcy5cclxuICAgKlxyXG4gICAqIFRoZSBhdXRoZW50aWNhdGlvbiBsb29wIHN0b3BzIGFzIHNvb24gYXMgdGhlIHVzZXIgaXMgYXV0aGVudGljYXRlZCB1c2luZyBhbnlcclxuICAgKiBvZiB0aGUgbWVudGlvbmVkIGd1YXJkcyBhbmQgdGhhdCBndWFyZCB3aWxsIGJlIHVzZWQgYnkgdGhlIHJlc3Qgb2YgdGhlIGNvZGVcclxuICAgKiBkdXJpbmcgdGhlIGN1cnJlbnQgcmVxdWVzdC5cclxuICAgKi9cclxuICBwcm90ZWN0ZWQgYXN5bmMgYXV0aGVudGljYXRlKGF1dGg6IEh0dHBDb250ZXh0Q29udHJhY3RbJ2F1dGgnXSwgZ3VhcmRzOiAoa2V5b2YgR3VhcmRzTGlzdClbXSkge1xyXG4gICAgLyoqXHJcbiAgICAgKiBIb2xkIHJlZmVyZW5jZSB0byB0aGUgZ3VhcmQgbGFzdCBhdHRlbXB0ZWQgd2l0aGluIHRoZSBmb3IgbG9vcC4gV2UgcGFzc1xyXG4gICAgICogdGhlIHJlZmVyZW5jZSBvZiB0aGUgZ3VhcmQgdG8gdGhlIFwiQXV0aGVudGljYXRpb25FeGNlcHRpb25cIiwgc28gdGhhdFxyXG4gICAgICogaXQgY2FuIGRlY2lkZSB0aGUgY29ycmVjdCByZXNwb25zZSBiZWhhdmlvciBiYXNlZCB1cG9uIHRoZSBndWFyZFxyXG4gICAgICogZHJpdmVyXHJcbiAgICAgKi9cclxuICAgIGxldCBndWFyZExhc3RBdHRlbXB0ZWQ6IHN0cmluZyB8IHVuZGVmaW5lZFxyXG5cclxuICAgIGZvciAobGV0IGd1YXJkIG9mIGd1YXJkcykge1xyXG4gICAgICBndWFyZExhc3RBdHRlbXB0ZWQgPSBndWFyZFxyXG5cclxuICAgICAgaWYgKGF3YWl0IGF1dGgudXNlKGd1YXJkKS5jaGVjaygpKSB7XHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogSW5zdHJ1Y3QgYXV0aCB0byB1c2UgdGhlIGdpdmVuIGd1YXJkIGFzIHRoZSBkZWZhdWx0IGd1YXJkIGZvclxyXG4gICAgICAgICAqIHRoZSByZXN0IG9mIHRoZSByZXF1ZXN0LCBzaW5jZSB0aGUgdXNlciBhdXRoZW50aWNhdGVkXHJcbiAgICAgICAgICogc3VjY2VlZGVkIGhlcmVcclxuICAgICAgICAgKi9cclxuICAgICAgICBhdXRoLmRlZmF1bHRHdWFyZCA9IGd1YXJkXHJcbiAgICAgICAgcmV0dXJuIHRydWVcclxuICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogVW5hYmxlIHRvIGF1dGhlbnRpY2F0ZSB1c2luZyBhbnkgZ3VhcmRcclxuICAgICAqL1xyXG4gICAgdGhyb3cgbmV3IEF1dGhlbnRpY2F0aW9uRXhjZXB0aW9uKFxyXG4gICAgICAnVW5hdXRob3JpemVkIGFjY2VzcycsXHJcbiAgICAgICdFX1VOQVVUSE9SSVpFRF9BQ0NFU1MnLFxyXG4gICAgICBndWFyZExhc3RBdHRlbXB0ZWQsXHJcbiAgICAgIHRoaXMucmVkaXJlY3RUbyxcclxuICAgIClcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIEhhbmRsZSByZXF1ZXN0XHJcbiAgICovXHJcbiAgcHVibGljIGFzeW5jIGhhbmRsZSAoXHJcbiAgICB7IGF1dGggfTogSHR0cENvbnRleHRDb250cmFjdCxcclxuICAgIG5leHQ6ICgpID0+IFByb21pc2U8dm9pZD4sXHJcbiAgICBjdXN0b21HdWFyZHM6IChrZXlvZiBHdWFyZHNMaXN0KVtdXHJcbiAgKSB7XHJcbiAgICAvKipcclxuICAgICAqIFVzZXMgdGhlIHVzZXIgZGVmaW5lZCBndWFyZHMgb3IgdGhlIGRlZmF1bHQgZ3VhcmQgbWVudGlvbmVkIGluXHJcbiAgICAgKiB0aGUgY29uZmlnIGZpbGVcclxuICAgICAqL1xyXG4gICAgY29uc3QgZ3VhcmRzID0gY3VzdG9tR3VhcmRzLmxlbmd0aCA/IGN1c3RvbUd1YXJkcyA6IFthdXRoLm5hbWVdXHJcbiAgICBhd2FpdCB0aGlzLmF1dGhlbnRpY2F0ZShhdXRoLCBndWFyZHMpXHJcbiAgICBhd2FpdCBuZXh0KClcclxuICB9XHJcbn1cclxuIl19